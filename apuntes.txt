*Clase 12 | Volver en el tiempo

git reset (version) --> nos permite volver a una versión anterior

dos tipos --hard, se borran por completo todos los commit anteriores y sus cambios
			 --soft (mantiene todos los cambios commiteados)
			 (default = mixed) se borran los commits, pero no los cambios y quita archivos de staging

git log --stat --> se pueden ver los cambios especificos que se hicieron en cuales archivos a partir del commit
con "q" salis

git checkout (version) <file> --> para ver cómo era el archivo antes, o volver a una versión anterior, ojo que trae esta version a staging,
											 si le das commit pisas la version del archivo. Para volver a la última versión tendrías que ejecutar:

git checkout master <file> --> y ahi volves a la última versión

*Clase 13 | Git reset vs. Git rm

Git reset y git rm son comandos con utilidades muy diferentes, pero aún así se confunden muy fácilmente.

git rm
Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones.
Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y
recuperar el último commit antes de borrar el archivo en cuestión.

Recuerda que git rm no puede usarse así nomás. Debemos usar uno de los flags para indicarle a Git cómo eliminar
los archivos que ya no necesitamos en la última versión del proyecto:

git rm --cached --> Elimina los archivos del área de Staging y del próximo commit pero los
					  	  mantiene en nuestro disco duro.
git rm --force --> Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que
						 podemos acceder al registro de la existencia de los archivos, de modo que podremos
						 recuperarlos si es necesario (pero debemos usar comandos más avanzados).
git reset
Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar,
pasear y volver. Con git reset volvemos al pasado sin la posibilidad de volver al futuro.
Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.

Este comando es muy peligroso y debemos usarlo solo en caso de emergencia. Recuerda que debemos
usar alguna de estas dos opciones:

Hay dos formas de usar git reset:

git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging
						se borra del historial.
git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging,
						así podemos aplicar las últimas actualizaciones a un nuevo commit.

¡Pero todavía falta algo!

git reset HEAD: Este es el comando para sacar archivos del área de Staging. No para borrarlos ni nada de eso,
solo para que los últimos cambios de estos archivos no se envíen al próximo commit, a menos que cambiemos de
opinión y los incluyamos de nuevo en staging con git add, por supuesto.
¿Por qué esto es importante? Imagina el siguiente caso:

Hacemos cambios en los archivos de un proyecto para una nueva actualización.
Todos los archivos con cambios se mueven al área de staging con el comando git add.
Pero te das cuenta de que uno de esos archivos no está listo todavía. Actualizaste el archivo pero ese
cambio no debe ir en el próximo commit por ahora.

¿Qué podemos hacer?

Bueno, todos los cambios están en el área de Staging, incluido el archivo con los cambios que no
están listos. Esto significa que debemos sacar ese archivo de Staging para poder hacer commit de todos los demás.

¡Al usar git rm lo que haremos será eliminar este archivo completamente de git!
Todavía tendremos el historial de cambios de este archivo, con la eliminación del archivo como su
última actualización. Recuerda que en este caso no buscábamos eliminar un archivo, solo dejarlo como
estaba y actualizarlo después, no en este commit.

En cambio, si usamos git reset HEAD (en este caso, sería lo contrario del comando git add), lo único que haremos será mover estos
cambios de Staging a Unstaged. Seguiremos teniendo los últimos cambios del archivo, el repositorio mantendrá el archivo
y no habremos perdido nada.

Conclusión: Lo mejor que puedes hacer para salvar tu puesto y evitar un incendio en tu trabajo
es conocer muy bien la diferencia y los riesgos de todos los comandos de Git.

*Clase 14 | Flujo de trabajo básico con un repositorio remoto

git clone <url> --> Trae desde el repositorio remoto una copia de la rama master a tu directorio de trabajo y guarda todos los
						  cambios historicos que tuvo el proyecto al repositorio local

git push --> Una vez que se introducen cambio en local, sigue el flujo de trabajo, git add, git commit y luego con git push envío mis cambios
al repositorio remoto.

git fetch --> si quiero traer las actualizaciones si alguien hizo algún cambio, pero esto lo trae al repositorio local.

git merge --> luego del fetch y para que lo traiga al directorio de trabajo (a mis archivos).

git pull --> fusiona git fetch y git merge. De esa manera siempre tengo una copia actualizada de lo último que pasó en el repositorio.

*Clase 15 | Ramas o branches de Git

Cuando creas una nueva rama, creas una copia del último commit en otro lado.
git branch <nombre_nueva_rama> --> creas la nueva rama, pero seguis apuntando al master

git checkout <nombre_nueva_rama> --> te moves a la nueva rama

git merge --> para fusionar una rama nueva con la master, siempre el merge se ejecuta desde la rama master (o mejor dicho la que queres que
				  siga siendo la principal, porque sino, la rama pasa a ser la master), queres poner el HEAD en master.

* Clase 22 | Tags y versiones en Git y GitHub

con el comando git log podes ver la historia del proyecto.
	^ --all --> para ver tooooda la historia
	^ --all --graph --> te muestra además las rayitas que muestran la fusión de branches
	^ --all --graph --decorate --oneline --> de un vistazo te muestra toda la historia bien resumida y gráfica, hice un alias *arbolgit*

(para hacer un alias en linux --> alias nombreAlias="el comando larguiiisimo")

Tags
Son muy utiles en GitHub, porque podes mostrar a otres usuaries las versiones que fueron ocurriendo
--> creación -> git tag -a v0.1(versión) -m "mensaje" b7e9a29(nº que identifica el commit)
--> conocer los tags del proyecto -> git tag
--> saber a qué commit se relaciona -> git show-ref --tags
--> enviarlos al repositorio remoto -> git push origin -tags
--> borrar un tag -> git tag -d version, aunque hagas el push tiende a quedar en GitHub,
							entonces tenes que hacer --> git push origin :refs/tags/v1.1

Clase 23 | Manejo de ramas en GitHub

git show-branch --> muestra las ramas y su historia básica
git show-branch --all --> da mayor detalle
gitk --> abre un software que muestra un entorno MUY visual de lo que ocurre en git